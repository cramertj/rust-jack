initSidebarItems({"constant":[["BACKEND_ERROR",""],["CAN_MONITOR",""],["CLIENT_ZOMBIE",""],["DEFAULT_AUDIO_TYPE","port type for Jack's built in 32 bit floating audio."],["DEFAULT_MIDI_TYPE","port type for Jack's built in 8 bit raw midi"],["FAILURE",""],["INIT_FAILURE",""],["INVALID_OPTION",""],["IS_INPUT",""],["IS_OUTPUT",""],["IS_PHYSICAL",""],["IS_TERMINAL",""],["LOAD_FAILURE",""],["LOAD_INIT",""],["LOAD_NAME",""],["NAME_NOT_UNIQUE",""],["NO_START_SERVER",""],["NO_SUCH_CLIENT",""],["NULL_OPTION",""],["SERVER_ERROR",""],["SERVER_FAILED",""],["SERVER_NAME",""],["SERVER_STARTED",""],["SESSION_ID",""],["SHM_FAILURE",""],["UNKNOWN_ERROR",""],["USE_EXACT_NAME",""],["VERSION_ERROR",""]],"enum":[["JackControl",""],["JackErr",""],["LatencyType","Used by `JackHandler::latency()`."]],"fn":[["get_time",""],["set_info_callbacks","TODO: Provide better API for this functionality"]],"struct":[["Client","A client to interact with a Jack server."],["ClientOptions","Option flags for opening a Jack client."],["ClientStatus","Status flags for Jack clients."],["Port","An endpoint to interact with Jack data streams, for audio, midi, etc..."],["PortFlags","Flags for specifying port options."]],"trait":[["JackHandler","Specifies callbacks for Jack."]]});